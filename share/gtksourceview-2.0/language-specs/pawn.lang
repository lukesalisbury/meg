<?xml version="1.0" encoding="UTF-8"?>

<language id="pawn" _name="pawn" version="2.0" _section="Scripts">
	<metadata>
		<property name="line-comment-start">//</property>
		<property name="block-comment-start">/*</property>
		<property name="block-comment-end">*/</property>
	</metadata>

	<styles>
		<style id="comment"				_name="Comment"					map-to="def:comment"/>
		<style id="error"				_name="Error"					map-to="def:error"/>
		<style id="string"				_name="String"					map-to="def:string"/>
		<style id="unstring"			_name="Unpacked String"			map-to="def:string"/>
		<style id="preprocessor"		_name="Preprocessor"			map-to="def:preprocessor"/>
		<style id="common-defines"		_name="Common Defines"			map-to="def:special-constant"/>
		<style id="included-file"		_name="Included File"			map-to="def:string"/>
		<style id="char"				_name="Character"				map-to="def:character"/>
		<style id="keyword"				_name="Keyword"					map-to="def:keyword"/>
		<style id="type"				_name="Data Type"				map-to="def:type"/>
		<style id="escaped-character"	_name="Escaped Character"		map-to="def:special-char"/>
		<style id="floating-point"		_name="Floating point number"	map-to="def:floating-point"/>
		<style id="decimal"				_name="Decimal number"			map-to="def:decimal"/>
		<style id="hexadecimal"			_name="Hexadecimal number"		map-to="def:base-n-integer"/>
		<style id="function"			_name="Function"				map-to="def:function"/>
	</styles>

	<definitions>
		<define-regex id="escaped-character" extended="true">
			\\(				   # leading backslash
			[\\\"\'nrbtfav\?] |   # escaped character
			x[0-9A-Fa-f]+		 # 'x' followed by hex digits
			)
		</define-regex>

		<context id="pawn">
			<include>
				<context id="escaped-character" style-ref="escaped-character">
					<match>\%{escaped-character}</match>
				</context>

				<!-- Comments -->
				<context id="comment" style-ref="comment" end-at-line-end="true">
					<start>//</start>
				</context>

				<context id="comment-multiline" style-ref="comment">
					<start>/\*</start>
					<end>\*/</end>
				</context>

				<context id="close-comment-outside-comment" style-ref="error">
					<match>\*/(?!\*)</match>
				</context>

				<!-- Preprocessor -->
				<define-regex id="preproc-start">^\s*#\s*</define-regex>

				<context id="if0-comment" style-ref="comment">
					<start>\%{preproc-start}if\b\s*0\b</start>
					<end>\%{preproc-start}(endif|else|elif)\b</end>
					<include>
						<context id="if-in-if0">
							<start>\%{preproc-start}if(n?def)?\b</start>
							<end>\%{preproc-start}endif\b</end>
							<include>
								<context ref="if-in-if0"/>
							</include>
						</context>
					</include>
				</context>

				<context id="include" style-ref="preprocessor">
					<match extended="true">
							\%{preproc-start}
							(include|tryinclude)\s*
							(".*?"|&lt;.*&gt;)
					</match>
					<include>
						<context id="included-file" sub-pattern="2" style-ref="included-file"/>
					</include>
				</context>

				<context id="preprocessor" style-ref="preprocessor" end-at-line-end="true">
					<start extended="true">
							\%{preproc-start}
							(define|undef|error|pragma|ident|if(n?def)?|else|elif|endif|line|warning)
							\b
					</start>
					<include>
						<context ref="string" ignore-style="true"/>
						<context ref="comment"/>
						<context ref="comment-multiline"/>
					</include>
				</context>

				<context id="string" style-ref="string" end-at-line-end="true">
					<start>L?"</start>
					<end>"</end>
					<include>
						<context ref="escaped-character"/>
					</include>
				</context>

				<context id="unstring" style-ref="string" end-at-line-end="true">
					<start>''</start>
					<end>''</end>
					<include>
						<context ref="escaped-character"/>
					</include>
				</context>

				<!-- http://www.lysator.liu.se/c/ANSI-C-grammar-l.html -->
				<context id="float" style-ref="floating-point">
					<match extended="true">
						(?&lt;![\w\.])
						((\.[0-9]+ | [0-9]+\.[0-9]*) ([Ee][+-]?[0-9]*)? |
						 ([0-9]+[Ee][+-]?[0-9]*))
						[fFlL]?
						(?![\w\.])
					</match>
				</context>

				<context id="hexadecimal" style-ref="hexadecimal">
					<match extended="true">
						(?&lt;![\w\.])
						0[xX][a-fA-F0-9]+[uUlL]*
						(?![\w\.])
					</match>
				</context>

				<context id="decimal" style-ref="decimal">
					<match extended="true">
						(?&lt;![\w\.])
						[0-9]+[uUlL]*
						(?![\w\.])
					</match>
				</context>

				<!-- Keywords -->
				<context id="keywords" style-ref="keyword">
					<keyword>break</keyword>
					<keyword>case</keyword>
					<keyword>continue</keyword>
					<keyword>default</keyword>
					<keyword>do</keyword>
					<keyword>else</keyword>
					<keyword>enum</keyword>
					<keyword>for</keyword>
					<keyword>if</keyword>
					<keyword>new</keyword>
					<keyword>return</keyword>
					<keyword>sizeof</keyword>
					<keyword>switch</keyword>
					<keyword>while</keyword>
					<keyword>forward</keyword>
					<keyword>public</keyword>
					<keyword>static</keyword>
					<keyword>stock</keyword>
				</context>

				<context id="types" style-ref="type">
					<keyword>bool:</keyword>
					<keyword>Float:</keyword>
					<keyword>Fixed:</keyword>
					<keyword>object:</keyword>
				</context>

				<context id="common-defines" style-ref="common-defines">
					<keyword>true</keyword>
					<keyword>false</keyword>
				</context>

				<context id="function" style-ref="function">
					<keyword>sleep</keyword>
				</context>
			</include>
		</context>
	</definitions>
</language>
